# 1. Python Program to Create Dictionary from an Object

class Person:
    def __init__(self, name, age, city):
        self.name = name
        self.age = age
        self.city = city

# Create an object
person = Person("John", 30, "New York")

# Convert object to dictionary
person_dict = person.__dict__
print("Dictionary from object:", person_dict)

# 2. Python Program to Check if a Key Exists in a Dictionary or Not

def check_key_exists(dictionary, key):
    if key in dictionary:
        print(f"Key '{key}' exists in the dictionary.")
    else:
        print(f"Key '{key}' does not exist in the dictionary.")

# Example
my_dict = {"name": "John", "age": 30, "city": "New York"}
check_key_exists(my_dict, "age")
check_key_exists(my_dict, "gender")

# 3. Python Program to Add a Key-Value Pair to the Dictionary

def add_key_value(dictionary, key, value):
    dictionary[key] = value
    return dictionary

# Example
my_dict = {"name": "John", "age": 30}
new_dict = add_key_value(my_dict, "city", "New York")
print("Updated dictionary:", new_dict)

# 4. Python Program to Find the Sum of All the Items in a Dictionary

def sum_of_items(dictionary):
    return sum(dictionary.values())

# Example
my_dict = {"a": 10, "b": 20, "c": 30}
print("Sum of all items:", sum_of_items(my_dict))

# 5. Python Program to Multiply All the Items in a Dictionary

def multiply_items(dictionary):
    result = 1
    for value in dictionary.values():
        result *= value
    return result

# Example
my_dict = {"a": 10, "b": 20, "c": 30}
print("Product of all items:", multiply_items(my_dict))

# 6. Python Program to Remove a Key from a Dictionary

def remove_key(dictionary, key):
    if key in dictionary:
        del dictionary[key]
        print(f"Key '{key}' removed.")
    else:
        print(f"Key '{key}' not found.")

# Example
my_dict = {"name": "John", "age": 30, "city": "New York"}
remove_key(my_dict, "age")
print("Updated dictionary:", my_dict)

# 7. Python Program to Concatenate Two Dictionaries

def concatenate_dicts(dict1, dict2):
    dict1.update(dict2)
    return dict1

# Example
dict1 = {"a": 1, "b": 2}
dict2 = {"c": 3, "d": 4}
result = concatenate_dicts(dict1, dict2)
print("Concatenated dictionary:", result)

# 8. Python Program to Map Two Lists into a Dictionary

def map_lists_to_dict(keys, values):
    return dict(zip(keys, values))

# Example
keys = ["name", "age", "city"]
values = ["John", 30, "New York"]
mapped_dict = map_lists_to_dict(keys, values)
print("Mapped dictionary:", mapped_dict)

# 9. Python Program to Create a Dictionary with Key as First Character and Value as Words Starting with that Character

def create_dict_from_words(words):
    result = {}
    for word in words:
        first_char = word[0].lower()
        if first_char not in result:
            result[first_char] = []
        result[first_char].append(word)
    return result

# Example
words = ["apple", "banana", "cherry", "avocado", "blueberry"]
word_dict = create_dict_from_words(words)
print("Dictionary with first character as key:", word_dict)

# 10. Python Program to Create Dictionary that Contains Numbers

def create_number_dict(n):
    return {i: i**2 for i in range(1, n+1)}

# Example
n = 5
num_dict = create_number_dict(n)
print("Number dictionary:", num_dict)

# 11. Python Program to Count the Frequency of Each Word in a String using Dictionary

def word_frequency(string):
    words = string.split()
    frequency = {}
    for word in words:
        word = word.lower()  # Convert to lowercase to ignore case sensitivity
        if word in frequency:
            frequency[word] += 1
        else:
            frequency[word] = 1
    return frequency

# Example
input_string = "Python is great and Python is easy"
word_freq = word_frequency(input_string)
print("Word frequency:", word_freq)

